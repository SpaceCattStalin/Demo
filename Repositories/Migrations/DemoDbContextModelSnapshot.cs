// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(DemoDbContext))]
    partial class DemoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Cart__3214EC074C214C3E");

                    b.HasIndex("OrdersId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UsersId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.DiscountCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC076EA21809");

                    b.ToTable("DiscountCode", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Orders__3214EC0725F77EBC");

                    b.HasIndex("UsersId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Repositories.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Payment__3214EC07B7C873C2");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Product__3214EC072751BF49");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1445),
                            Description = "Chuột không dây RGB",
                            ImageUrl = "http://localhost:5140/Images/chuot_gaming.jpg",
                            IsAvailable = false,
                            Name = "Chuột Gaming",
                            Price = 350000.00m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1532),
                            Description = "Bàn phím cơ Blue Switch",
                            ImageUrl = "http://localhost:5140/Images/ban_him_co.png",
                            IsAvailable = false,
                            Name = "Bàn phím Cơ",
                            Price = 950000.00m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1578),
                            Description = "Tai nghe chống ồn",
                            ImageUrl = "http://localhost:5140/Images/tai_nghe.jpg",
                            IsAvailable = false,
                            Name = "Tai nghe Bluetooth",
                            Price = 500000.00m,
                            StockQuantity = 75,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1579)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1744),
                            Description = "Màn hình Full HD 144Hz",
                            ImageUrl = "http://localhost:5140/Images/man_hinh.jpg",
                            IsAvailable = false,
                            Name = "Màn hình 24 inch",
                            Price = 3200000.00m,
                            StockQuantity = 20,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1744)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1746),
                            Description = "Laptop i5 8GB RAM",
                            ImageUrl = "http://localhost:5140/Images/laptop.jpg",
                            IsAvailable = false,
                            Name = "Laptop Văn phòng",
                            Price = 15000000.00m,
                            StockQuantity = 15,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1747)
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1748),
                            Description = "Webcam call 1080p",
                            ImageUrl = "http://localhost:5140/Images/webcam.jpg",
                            IsAvailable = false,
                            Name = "Webcam HD",
                            Price = 420000.00m,
                            StockQuantity = 60,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1749)
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1750),
                            Description = "Loa mini di động",
                            ImageUrl = "http://localhost:5140/Images/loa.jpg",
                            IsAvailable = false,
                            Name = "Loa Bluetooth",
                            Price = 380000.00m,
                            StockQuantity = 85,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1750)
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1752),
                            Description = "USB 3.0 tốc độ cao",
                            ImageUrl = "http://localhost:5140/Images/usb.jpg",
                            IsAvailable = false,
                            Name = "USB 64GB",
                            Price = 180000.00m,
                            StockQuantity = 100,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 289, DateTimeKind.Utc).AddTicks(1752)
                        });
                });

            modelBuilder.Entity("Repositories.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__RefreshT__3214EC0720F03FBF");

                    b.HasIndex("UsersId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Role__3214EC078D93600C");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("EndAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StartAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Shipping__3214EC07193B379B");

                    b.ToTable("Shipping", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07253DC382");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Admin Street",
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 292, DateTimeKind.Utc).AddTicks(2266),
                            Email = "admin@example.com",
                            Name = "Admin User",
                            Password = "123",
                            Phone = "0901234567",
                            RoleId = 1,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 292, DateTimeKind.Utc).AddTicks(2386)
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 User Avenue",
                            CreatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 292, DateTimeKind.Utc).AddTicks(2469),
                            Email = "user@example.com",
                            Name = "Test User",
                            Password = "123",
                            Phone = "0987654321",
                            RoleId = 2,
                            UpdatedDate = new DateTime(2025, 10, 17, 9, 5, 5, 292, DateTimeKind.Utc).AddTicks(2470)
                        });
                });

            modelBuilder.Entity("Repositories.Entities.UsersDiscountCode", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UsersId", "DiscountCodeId")
                        .HasName("PK__Users_Di__15BAA66E5D867B73");

                    b.HasIndex("DiscountCodeId");

                    b.ToTable("Users_DiscountCode", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Cart", b =>
                {
                    b.HasOne("Repositories.Entities.Order", "Orders")
                        .WithMany("Carts")
                        .HasForeignKey("OrdersId")
                        .HasConstraintName("FKCart841263");

                    b.HasOne("Repositories.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FKCart557549");

                    b.HasOne("Repositories.Entities.User", "Users")
                        .WithMany("Carts")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("FKCart661383");

                    b.Navigation("Orders");

                    b.Navigation("Product");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Entities.Order", b =>
                {
                    b.HasOne("Repositories.Entities.User", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("FKOrders336570");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Entities.Payment", b =>
                {
                    b.HasOne("Repositories.Entities.Order", "IdNavigation")
                        .WithOne("Payment")
                        .HasForeignKey("Repositories.Entities.Payment", "Id")
                        .IsRequired()
                        .HasConstraintName("FKPayment927541");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Repositories.Entities.RefreshToken", b =>
                {
                    b.HasOne("Repositories.Entities.User", "Users")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("FKRefreshTok382511");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Entities.Shipping", b =>
                {
                    b.HasOne("Repositories.Entities.Order", "IdNavigation")
                        .WithOne("Shipping")
                        .HasForeignKey("Repositories.Entities.Shipping", "Id")
                        .IsRequired()
                        .HasConstraintName("FKShipping479047");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Repositories.Entities.User", b =>
                {
                    b.HasOne("Repositories.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FKUsers969682");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repositories.Entities.UsersDiscountCode", b =>
                {
                    b.HasOne("Repositories.Entities.DiscountCode", "DiscountCode")
                        .WithMany("UsersDiscountCodes")
                        .HasForeignKey("DiscountCodeId")
                        .IsRequired()
                        .HasConstraintName("FKUsers_Disc368718");

                    b.HasOne("Repositories.Entities.User", "Users")
                        .WithMany("UsersDiscountCodes")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("FKUsers_Disc661265");

                    b.Navigation("DiscountCode");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Entities.DiscountCode", b =>
                {
                    b.Navigation("UsersDiscountCodes");
                });

            modelBuilder.Entity("Repositories.Entities.Order", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Payment");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("Repositories.Entities.Product", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Repositories.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersDiscountCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
