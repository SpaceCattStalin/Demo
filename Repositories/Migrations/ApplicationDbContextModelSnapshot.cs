// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            UserId = 1
                        },
                        new
                        {
                            CartId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Repositories.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Repositories.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Chuột không dây RGB",
                            ImageUrl = "https://localhost:7067/Images/chuot_gaming.jpg",
                            Name = "Chuột Gaming",
                            Price = 350000m
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Bàn phím cơ Blue Switch",
                            ImageUrl = "https://localhost:7067/Images/ban_him_co.png",
                            Name = "Bàn phím Cơ",
                            Price = 950000m
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Tai nghe chống ồn",
                            ImageUrl = "https://localhost:7067/Images/tai_nghe.jpg",
                            Name = "Tai nghe Bluetooth",
                            Price = 500000m
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Màn hình Full HD 144Hz",
                            ImageUrl = "https://localhost:7067/Images/man_hinh.jpg",
                            Name = "Màn hình 24 inch",
                            Price = 3200000m
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "Laptop i5 8GB RAM",
                            ImageUrl = "https://localhost:7067/Images/laptop.jpg",
                            Name = "Laptop Văn phòng",
                            Price = 15000000m
                        },
                        new
                        {
                            ProductId = 6,
                            Description = "Webcam call 1080p",
                            ImageUrl = "https://localhost:7067/Images/webcam.jpg",
                            Name = "Webcam HD",
                            Price = 420000m
                        },
                        new
                        {
                            ProductId = 7,
                            Description = "Loa mini di động",
                            ImageUrl = "https://localhost:7067/Images/loa.jpg",
                            Name = "Loa Bluetooth",
                            Price = 380000m
                        },
                        new
                        {
                            ProductId = 8,
                            Description = "USB 3.0 tốc độ cao",
                            ImageUrl = "https://localhost:7067/Images/usb.jpg",
                            Name = "USB 64GB",
                            Price = 180000m
                        });
                });

            modelBuilder.Entity("Repositories.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "an@example.com",
                            PasswordHash = "hash123",
                            Username = "nguyenvana"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "b@example.com",
                            PasswordHash = "hash456",
                            Username = "lethib"
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Cart", b =>
                {
                    b.HasOne("Repositories.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Repositories.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Entities.CartItem", b =>
                {
                    b.HasOne("Repositories.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repositories.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Repositories.Entities.Product", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Repositories.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
